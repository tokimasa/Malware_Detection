# -*- coding: utf-8 -*-
"""
Created on Thu Mar 15 19:29:24 2018

@author: TOKIMASA
"""
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from dimension_reduction import *
from classifier_comparison import *
from roc_comparison import *
from rf_feature_importance import *

dataset_df = pd.read_csv('dataset.csv')

label_df = pd.read_csv('training-set.csv', names=['FileID','Label'], header=None)
data_df = label_df.merge(dataset_df, on='FileID', how='left')
data_df = data_df[['Customer_Count','Max_Customer_Repeat','Product_Count','Max_Product_Repeat','Night_Ratio','Label']]

sns.set(style="ticks")
sns.pairplot(data_df, hue="Label")

sns.set(style="white")
g = sns.PairGrid(data_df, diag_sharey=False)
g.map_lower(sns.kdeplot, cmap="Blues_d")
g.map_upper(plt.scatter)
g.map_diag(sns.kdeplot, lw=3)

h = sns.PairGrid(data_df[data_df.Label==0][['Customer_Count','Max_Customer_Repeat','Product_Count','Max_Product_Repeat','Night_Ratio']], diag_sharey=False)
h.map_lower(sns.kdeplot, cmap="BuGn_r")
h.map_upper(plt.scatter)
h.map_diag(sns.kdeplot, lw=3)

h = sns.PairGrid(data_df[data_df.Label==1][['Customer_Count','Max_Customer_Repeat','Product_Count','Max_Product_Repeat','Night_Ratio']], diag_sharey=False)
h.map_lower(sns.kdeplot, cmap="BuGn_r")
h.map_upper(plt.scatter)
h.map_diag(sns.kdeplot, lw=3)


data_sampling = data_df.sample(frac=0.05).reset_index(drop=True)
x_tsne = get_tsne_2d_array(data_sampling[['Customer_Count','Max_Customer_Repeat','Product_Count','Max_Product_Repeat','Night_Ratio']])
x_pca = get_pca_2d_array(data_sampling[['Customer_Count','Max_Customer_Repeat','Product_Count','Max_Product_Repeat','Night_Ratio']])

data_tsne = pd.DataFrame(x_tsne)
data_tsne = pd.concat([data_tsne, data_sampling.Label], axis=1)

data_pca = pd.DataFrame(x_pca)
data_pca = pd.concat([data_pca, data_sampling.Label], axis=1)

binary_classification(data_tsne)
binary_classification(data_pca)

clf = RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)
roc_cv_compare(data_df, clf)
#roc_cv_compare(data_df[['Customer_Count','Max_Customer_Repeat','Max_Product_Repeat','Night_Ratio','Label']], clf)

get_feature_importance(data_df)
